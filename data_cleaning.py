# -*- coding: utf-8 -*-
"""Data_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KCDItmFNk5zjFRowKLLHiMxNomzq6T8Q
"""

import pandas as pd

circuits = pd.read_csv("circuits.csv")

circuits1=circuits.drop(columns=["lat","lng","alt","url"])
print(circuits1)
circuits1.to_csv('circuits1.csv', index=False)

"""# New Section"""

constructors = pd.read_csv("constructors.csv")
print(constructors.head())
constructors1=constructors.drop(columns=["url"])
constructors1.to_csv('constructors1.csv', index=False)

########
drivers = pd.read_csv("drivers.csv")
#print(drivers.head())
drivers1=drivers.drop(columns=["url"])
drivers1.replace('\\N', pd.NA, inplace=True)

# drop rows with NaN values
drivers1.dropna(inplace=True)

# reset index
drivers1.reset_index(drop=True, inplace=True)
drivers1.to_csv('drivers1.csv', index=False)
drivers_list=drivers1['driverId'].unique()
print(drivers1.head())

races = pd.read_csv("races.csv")
races1=races.drop(races.columns[7:], axis=1)
print(races1.head())
races1['date'] = pd.to_datetime(races1['date'])

# Filter out rows with years less than 2012
races1 = races1[races1['date'].dt.year >= 2012]
races1=races1.rename(columns={"date":"r_date","time":"r_time"})
# Get the unique race IDs of the remaining rows and store them in a list
raceids = races1['raceId'].unique().tolist()
races1.to_csv('races1.csv', index=False)

constructor_standings= pd.read_csv("constructor_standings.csv")
print(constructor_standings.head())
constructor_standings1=constructor_standings.drop(columns=["positionText","constructorStandingsId"])
constructor_standings1 = constructor_standings1[constructor_standings1['raceId'].isin(raceids)]
constructor_standings1.to_csv('constructor_standings1.csv', index=False)
print(constructor_standings1.head())

driver_standings = pd.read_csv("driver_standings.csv")
print(driver_standings.head())
driver_standings1=driver_standings.drop(columns=["positionText","driverStandingsId"])
driver_standings1 = driver_standings1[driver_standings1['raceId'].isin(raceids)]
driver_standings1 = driver_standings1[driver_standings1['driverId'].isin(drivers_list)]
driver_standings1.to_csv('driver_standings1.csv', index=False)

######
lap_times = pd.read_csv("lap_times.csv")
print(lap_times.head())
lap_times1=lap_times.drop(columns=["milliseconds"])
lap_times1=lap_times.rename(columns={"time":"l_time"})
lap_times1 = lap_times1[lap_times1['raceId'].isin(raceids)]
lap_times1 = lap_times1[lap_times1['driverId'].isin(drivers_list)]
lap_times1.to_csv('lap_times1.csv', index=False)

pit_stops = pd.read_csv("pit_stops.csv")
print(pit_stops.head())
pit_stops1=pit_stops.drop(columns=["milliseconds"])
pit_stops1=pit_stops1.rename(columns={"time":"p_time"})
pit_stops1 = pit_stops1[pit_stops1['raceId'].isin(raceids)]
pit_stops1 = pit_stops1[pit_stops1['driverId'].isin(drivers_list)]
pit_stops1 = pit_stops1[pd.to_numeric(pit_stops1['duration'], errors='coerce').notnull()]
pit_stops1.to_csv('pit_stops1.csv', index=False)

#######
qualifying = pd.read_csv("qualifying.csv")
print(qualifying.head())
qualifying1=qualifying.drop(columns=["qualifyId"])
qualifying1 = qualifying1[qualifying1['raceId'].isin(raceids)]
qualifying1 = qualifying1[qualifying1['driverId'].isin(drivers_list)]
qualifying1.replace('\\N', pd.NA, inplace=True)

# drop rows with NaN values
qualifying1.dropna(inplace=True)

# reset index
qualifying1.reset_index(drop=True, inplace=True)
qualifying1.to_csv('qualifying1.csv', index=False)

status = pd.read_csv("status.csv")
print(status.head())
status.to_csv('status1.csv', index=False)

results = pd.read_csv("results.csv")

results1=results.drop(columns=["milliseconds","positionText","positionOrder","time"])
results1=results1.rename(columns={"time":"r_time"})
results1 = results1[results1['raceId'].isin(raceids)]
results1 = results1[results1['driverId'].isin(drivers_list)]
# drop rows with numeric values in fastestLapSpeed column
results1 = results1[results1['fastestLapTime'].apply(lambda x: not isinstance(x, (int, float)))]
results1.replace('\\N', pd.NA, inplace=True)

# drop rows with NaN values in fastestLapSpeed column
results1.dropna(subset=['fastestLapTime'], thresh=1, inplace=True)
print(results1.head())
results1.to_csv('results1.csv', index=False)
resultIds=results1['resultId'].unique()
print(resultIds)

########
sprint_results = pd.read_csv("sprint_results.csv")

sprint_results1=sprint_results.drop(columns=["milliseconds","positionText","positionOrder","time"])
sprint_results1 = sprint_results1[sprint_results1['raceId'].isin(raceids)]
sprint_results1 = sprint_results1[sprint_results1['driverId'].isin(drivers_list)]
#sprint_results1 = sprint_results1[sprint_results1['resultId'].isin(resultIds)]

#sprint_results1 = sprint_results1[sprint_results1['fastestLapTime'].apply(lambda x: not isinstance(x, (int, float)))]
#sprint_results1.replace('\\N', pd.NA, inplace=True)

# drop rows with NaN values in fastestLapSpeed column
#sprint_results1.dropna(subset=['fastestLapTime'], thresh=1, inplace=True)
print(sprint_results1.head())
sprint_results1.to_csv('sprint_results1.csv', index=False)

